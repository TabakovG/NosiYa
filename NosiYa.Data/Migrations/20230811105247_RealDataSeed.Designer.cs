// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NosiYa.Data;

#nullable disable

namespace NosiYa.Data.Migrations
{
    [DbContext(typeof(NosiYaDbContext))]
    [Migration("20230811105247_RealDataSeed")]
    partial class RealDataSeed
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.20")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("NosiYa.Data.Models.ApplicationUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("NosiYa.Data.Models.Cart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<Guid>("OwnerId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId")
                        .IsUnique();

                    b.ToTable("Carts");
                });

            modelBuilder.Entity("NosiYa.Data.Models.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<int>("EventId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedContent")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<Guid>("OwnerId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.HasIndex("OwnerId");

                    b.ToTable("Comments");

                    b.HasData(
                        new
                        {
                            Id = 71,
                            Content = "Здравейте, Тази година входа за паркинга ще е зад сцената! ",
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EventId = 1,
                            IsActive = true,
                            IsApproved = true,
                            OwnerId = new Guid("7c34fb52-0fdb-4cd7-027f-08db822aa1b7")
                        },
                        new
                        {
                            Id = 72,
                            Content = "Някой знае ли дали може да се плати вход само за първия ден?",
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EventId = 1,
                            IsActive = true,
                            IsApproved = true,
                            OwnerId = new Guid("2f29d591-89ef-45b2-89a9-08db83ceb60e")
                        },
                        new
                        {
                            Id = 73,
                            Content = "Миналата година можеше. Цената беше 10лв.",
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EventId = 1,
                            IsActive = true,
                            IsApproved = true,
                            OwnerId = new Guid("7c34fb52-0fdb-4cd7-027f-08db822aa1b7")
                        },
                        new
                        {
                            Id = 74,
                            Content = "Този фестивал вече е добавен. Можете да премахнете това събитие.",
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EventId = 2,
                            IsActive = true,
                            IsApproved = true,
                            OwnerId = new Guid("7c34fb52-0fdb-4cd7-027f-08db822aa1b7")
                        },
                        new
                        {
                            Id = 75,
                            Content = "Международен фолклорен фестивал „Витоша“ е неделима част от Културния календар на София. Провеждането му е уникална възможност за българската публика да се запознае с музикалната и танцова традиция на държави от цял свят. Това е шанс младата аудитория да види най-атрактивното лице на фолклора.",
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EventId = 73,
                            IsActive = true,
                            IsApproved = true,
                            OwnerId = new Guid("7c34fb52-0fdb-4cd7-027f-08db822aa1b7")
                        });
                });

            modelBuilder.Entity("NosiYa.Data.Models.Event", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<DateTime>("EventEndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EventStartDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("bit");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid>("OwnerId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.ToTable("Events");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Фестивалът е създаден през 2008 година по идея на Христо Димитров – продуцент, хореограф и режисьор на Национален фолклорен ансамбъл „Българе”. Атрактивната им сватба с фолклорната певица Албена Вескова през 2005 г. в местността \"Костина\" край с. Рибарица по старинен български обичай, на която младоженците и присъстващите 400 гости са с български народни носии, има широк позитивен отзвук. Това мотивира създателя на „Българе” с помощта на неговите партньори Ян и Елена Андерсон, на тогавашния кмет на Жеравна Лъчезар Германов, бизнесмените Георги Манев и Калин Григоров, както и на други съмишленици, да организира много по-мащабно събитие, което да дава възможност на всеки желаещ поне за три дни в годината да облече българска носия и се откъсне от цивилизацията, като направи скок век и половина назад във времето.",
                            EventEndDate = new DateTime(2023, 10, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EventStartDate = new DateTime(2023, 10, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            IsApproved = true,
                            Location = "42.8336195015454, 26.45904413725397",
                            Name = "Фестивал на фолклорната носия - Жеравна",
                            OwnerId = new Guid("7c34fb52-0fdb-4cd7-027f-08db822aa1b7")
                        },
                        new
                        {
                            Id = 2,
                            Description = "Това мотивира създателя на „Българе” с помощта на неговите партньори Ян и Елена Андерсон, на тогавашния кмет на Жеравна Лъчезар Германов, бизнесмените Георги Манев и Калин Григоров, както и на други съмишленици, да организира много по-мащабно събитие, което да дава възможност на всеки желаещ поне за три дни в годината да облече българска носия и се откъсне от цивилизацията, като направи скок век и половина назад във времето.",
                            EventEndDate = new DateTime(2023, 7, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EventStartDate = new DateTime(2023, 7, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            IsApproved = false,
                            Location = "42.8336195015454, 26.45904413725397",
                            Name = "Фестивал на  Жеравна",
                            OwnerId = new Guid("2f29d591-89ef-45b2-89a9-08db83ceb60e")
                        },
                        new
                        {
                            Id = 73,
                            Description = "Местоположение на сцените\r\n\r\nПешеходна зона пред Национален исторически музей, Бояна – 10.07, 11.07, 12.07, 13.07, 14.07 и15.07\r\nКино Кабана – 11.07\r\nс. Владая, НЧ „Светлина – 1906“ – 12.07\r\nкв. Княжево, пл. „Сред село“ – 13.07\r\nкв. Симеоново, НЧ „Отец Паисий“ – 14.07\r\nкв. Драгалевци, ул. „Карнобатски проход“ – 13.07\r\nкв. Бояна, парк „Воденичница“ – 14.07\r\nс. Мърчаево, 152 ОУ – 12.07\r\nМега Мол София, бул. „Царица Йоанна“ № 15 – 15.07",
                            EventEndDate = new DateTime(2023, 10, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EventStartDate = new DateTime(2023, 9, 27, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            IsApproved = true,
                            Location = "42.652049852021584, 23.26517291652124",
                            Name = "Международен фолклорен фестивал „Витоша",
                            OwnerId = new Guid("2f29d591-89ef-45b2-89a9-08db83ceb60e")
                        });
                });

            modelBuilder.Entity("NosiYa.Data.Models.Image", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("EventId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<int?>("OutfitPartId")
                        .HasColumnType("int");

                    b.Property<int?>("OutfitSetId")
                        .HasColumnType("int");

                    b.Property<int?>("RegionId")
                        .HasColumnType("int");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(1500)
                        .HasColumnType("nvarchar(1500)");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.HasIndex("OutfitPartId");

                    b.HasIndex("OutfitSetId");

                    b.HasIndex("RegionId");

                    b.ToTable("Images");

                    b.HasData(
                        new
                        {
                            Id = 171,
                            IsDefault = true,
                            OutfitSetId = 1,
                            Url = "/images/common/nosiq1/3245e510-10ee-4ac5-a181-3141cbef91a7.jpg"
                        },
                        new
                        {
                            Id = 172,
                            IsDefault = false,
                            OutfitSetId = 1,
                            Url = "/images/common/nosiq1/da5b3ea8-df94-4602-a255-251ac228396a.jpg"
                        },
                        new
                        {
                            Id = 173,
                            IsDefault = false,
                            OutfitSetId = 1,
                            Url = "/images/common/nosiq1/f24a886e-d320-4f8d-afe3-2156eca67d0c.jpg"
                        },
                        new
                        {
                            Id = 174,
                            IsDefault = true,
                            OutfitSetId = 2,
                            Url = "/images/common/nosiq17/054848d5-9b31-4b18-a1a2-bc9f91bac96d.jpg"
                        },
                        new
                        {
                            Id = 175,
                            IsDefault = false,
                            OutfitSetId = 2,
                            Url = "/images/common/nosiq17/82c31014-e3d5-42b6-b7ad-0bb533e401ef.jpg"
                        },
                        new
                        {
                            Id = 176,
                            IsDefault = false,
                            OutfitSetId = 2,
                            Url = "/images/common/nosiq17/ba4d583c-31d7-44c1-99a9-b02a7006d9eb.jpg"
                        },
                        new
                        {
                            Id = 177,
                            EventId = 1,
                            IsDefault = false,
                            Url = "/images/event/02b1f635-597e-421c-b7c0-25542c6bf6fe.jpg"
                        },
                        new
                        {
                            Id = 178,
                            EventId = 1,
                            IsDefault = false,
                            Url = "/images/event/92c33c52-81c0-4234-9540-d110fe071f97.jpeg"
                        },
                        new
                        {
                            Id = 179,
                            EventId = 2,
                            IsDefault = true,
                            Url = "/images/event/92c33c52-81c0-4234-9540-d110fe071f97.jpeg"
                        },
                        new
                        {
                            Id = 180,
                            EventId = 73,
                            IsDefault = true,
                            Url = "/images/event/f74ddf23-68d9-4b58-a982-18f3cba1a1f3.jpg"
                        },
                        new
                        {
                            Id = 181,
                            EventId = 73,
                            IsDefault = false,
                            Url = "/images/event/59b6dce3-8fe8-42a1-8998-7967e282c7b8.jpg"
                        },
                        new
                        {
                            Id = 182,
                            EventId = 73,
                            IsDefault = false,
                            Url = "/images/event/30fde865-6e69-4408-b490-ff5b0c49e70e.jpg"
                        },
                        new
                        {
                            Id = 183,
                            IsDefault = true,
                            RegionId = 1,
                            Url = "/images/region/12f52c5a-24ac-4b8b-99fb-34e245967555.jpg"
                        },
                        new
                        {
                            Id = 184,
                            IsDefault = false,
                            RegionId = 1,
                            Url = "/images/region/85deec0a-67cc-47ab-997b-a17ad7546041.jpg"
                        },
                        new
                        {
                            Id = 185,
                            IsDefault = true,
                            RegionId = 72,
                            Url = "/images/region/04d45bb6-1100-453f-9377-862a4c10dda6.jpg"
                        },
                        new
                        {
                            Id = 186,
                            IsDefault = false,
                            RegionId = 72,
                            Url = "/images/region/1ccc5fc0-15c9-4fa9-bad8-a3f23ca301c1.jpg"
                        },
                        new
                        {
                            Id = 187,
                            IsDefault = true,
                            RegionId = 73,
                            Url = "/images/region/ce68a779-2c71-488b-8cde-25b01df35ec5.jpg"
                        },
                        new
                        {
                            Id = 188,
                            IsDefault = true,
                            OutfitPartId = 1,
                            Url = "/images/common/nosiq17/ba4d583c-31d7-44c1-99a9-b02a7006d9eb.jpg"
                        },
                        new
                        {
                            Id = 189,
                            IsDefault = true,
                            OutfitPartId = 2,
                            Url = "/images/common/nosiq17/ba4d583c-31d7-44c1-99a9-b02a7006d9eb.jpg"
                        },
                        new
                        {
                            Id = 190,
                            IsDefault = true,
                            OutfitPartId = 3,
                            Url = "/images/common/nosiq17/ba4d583c-31d7-44c1-99a9-b02a7006d9eb.jpg"
                        },
                        new
                        {
                            Id = 191,
                            IsDefault = true,
                            OutfitPartId = 4,
                            Url = "/images/common/nosiq17/ba4d583c-31d7-44c1-99a9-b02a7006d9eb.jpg"
                        },
                        new
                        {
                            Id = 192,
                            IsDefault = true,
                            OutfitPartId = 5,
                            Url = "/images/common/nosiq17/ba4d583c-31d7-44c1-99a9-b02a7006d9eb.jpg"
                        },
                        new
                        {
                            Id = 193,
                            IsDefault = true,
                            OutfitPartId = 6,
                            Url = "/images/common/nosiq17/ba4d583c-31d7-44c1-99a9-b02a7006d9eb.jpg"
                        },
                        new
                        {
                            Id = 194,
                            IsDefault = true,
                            OutfitPartId = 7,
                            Url = "/images/common/nosiq17/ba4d583c-31d7-44c1-99a9-b02a7006d9eb.jpg"
                        });
                });

            modelBuilder.Entity("NosiYa.Data.Models.Outfit.OutfitForCart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CartId")
                        .HasColumnType("int");

                    b.Property<DateTime>("FromDate")
                        .HasColumnType("date");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("OutfitId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ToDate")
                        .HasColumnType("date");

                    b.HasKey("Id");

                    b.HasIndex("CartId");

                    b.HasIndex("OutfitId");

                    b.ToTable("OutfitsForCarts");

                    b.HasData(
                        new
                        {
                            Id = 171,
                            CartId = 1,
                            FromDate = new DateTime(2023, 8, 17, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            OutfitId = 1,
                            ToDate = new DateTime(2023, 8, 19, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 172,
                            CartId = 1,
                            FromDate = new DateTime(2023, 8, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            OutfitId = 1,
                            ToDate = new DateTime(2023, 8, 22, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 173,
                            CartId = 2,
                            FromDate = new DateTime(2023, 8, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            OutfitId = 1,
                            ToDate = new DateTime(2023, 8, 24, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 174,
                            CartId = 2,
                            FromDate = new DateTime(2023, 8, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            OutfitId = 2,
                            ToDate = new DateTime(2023, 8, 17, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 175,
                            CartId = 2,
                            FromDate = new DateTime(2023, 8, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            OutfitId = 2,
                            ToDate = new DateTime(2023, 8, 24, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("NosiYa.Data.Models.Outfit.OutfitPart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("OutfitPartType")
                        .HasColumnType("int");

                    b.Property<int>("OutfitSetId")
                        .HasColumnType("int");

                    b.Property<Guid>("OwnerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("RenterType")
                        .HasColumnType("int");

                    b.Property<string>("Size")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("Id");

                    b.HasIndex("OutfitSetId");

                    b.HasIndex("OwnerId");

                    b.ToTable("OutfitParts");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Color = "бял",
                            Description = "Риза: \r\n                            Рамене - 31см\r\n                            Гръдна обиколка - 73см,\r\n							Дължина - 41см,\r\n							Обиколка на ръкав - 30см,\r\n							Дължина на ръкав от рамото - 42см",
                            IsActive = true,
                            Name = "Детска Риза",
                            OutfitPartType = 4,
                            OutfitSetId = 2,
                            OwnerId = new Guid("7c34fb52-0fdb-4cd7-027f-08db822aa1b7"),
                            RenterType = 3,
                            Size = "-XS-"
                        },
                        new
                        {
                            Id = 2,
                            Color = "кафяв",
                            Description = "Елек: \r\n                            Рамене - 32см\r\n                            Дължина - 34см\r\n                            Отвор за ръкав - 27см",
                            IsActive = true,
                            Name = "Детски Елек",
                            OutfitPartType = 5,
                            OutfitSetId = 2,
                            OwnerId = new Guid("7c34fb52-0fdb-4cd7-027f-08db822aa1b7"),
                            RenterType = 3,
                            Size = "-XS-"
                        },
                        new
                        {
                            Id = 3,
                            Color = "кафяв",
                            Description = "Талия - регулира се с връзки,\r\n								Дължина - 71см",
                            IsActive = true,
                            Name = "Панталон",
                            OutfitPartType = 8,
                            OutfitSetId = 2,
                            OwnerId = new Guid("2f29d591-89ef-45b2-89a9-08db83ceb60e"),
                            RenterType = 3,
                            Size = "-XS-"
                        },
                        new
                        {
                            Id = 4,
                            Color = "червен",
                            Description = "Ширина - 27см, Дължина - 146см",
                            IsActive = true,
                            Name = "Пояс",
                            OutfitPartType = 1,
                            OutfitSetId = 2,
                            OwnerId = new Guid("7c34fb52-0fdb-4cd7-027f-08db822aa1b7"),
                            RenterType = 3,
                            Size = "-XS-"
                        },
                        new
                        {
                            Id = 5,
                            Color = "черен",
                            Description = "Ширина - 46см, Дължина - 57см",
                            IsActive = true,
                            Name = "Престилка",
                            OutfitPartType = 2,
                            OutfitSetId = 1,
                            OwnerId = new Guid("7c34fb52-0fdb-4cd7-027f-08db822aa1b7"),
                            RenterType = 2,
                            Size = "-S-М-"
                        },
                        new
                        {
                            Id = 6,
                            Color = "бял",
                            Description = "Рамене - 41см, Гръдна обиколка - 106см, Дължина - 56см, Ръкав обиколка - 36см, Ръкав дължина от рамото - 49",
                            IsActive = true,
                            Name = "Риза",
                            OutfitPartType = 4,
                            OutfitSetId = 1,
                            OwnerId = new Guid("7c34fb52-0fdb-4cd7-027f-08db822aa1b7"),
                            RenterType = 2,
                            Size = "-S-М-"
                        },
                        new
                        {
                            Id = 7,
                            Color = "червен",
                            Description = "Рамене - 40см, Гръдна обиколка - 90см, Талия - 74см, Дължина - 103см",
                            IsActive = true,
                            Name = "Сукман",
                            OutfitPartType = 6,
                            OutfitSetId = 1,
                            OwnerId = new Guid("7c34fb52-0fdb-4cd7-027f-08db822aa1b7"),
                            RenterType = 2,
                            Size = "-S-М-"
                        });
                });

            modelBuilder.Entity("NosiYa.Data.Models.Outfit.OutfitRenterDate", b =>
                {
                    b.Property<Guid>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateRangeEnd")
                        .HasColumnType("date");

                    b.Property<DateTime>("DateRangeStart")
                        .HasColumnType("date");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("bit");

                    b.Property<int>("OutfitId")
                        .HasColumnType("int");

                    b.Property<Guid>("RenterId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("OrderId");

                    b.HasIndex("OutfitId");

                    b.HasIndex("RenterId");

                    b.ToTable("OutfitRenterDates");

                    b.HasData(
                        new
                        {
                            OrderId = new Guid("c17279d7-83ce-4acb-9890-f6f8d47949f5"),
                            DateRangeEnd = new DateTime(2023, 9, 27, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateRangeStart = new DateTime(2023, 9, 27, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            IsApproved = false,
                            OutfitId = 1,
                            RenterId = new Guid("7c34fb52-0fdb-4cd7-027f-08db822aa1b7")
                        },
                        new
                        {
                            OrderId = new Guid("13bf08ed-1805-4eb6-9b60-cc56834e567c"),
                            DateRangeEnd = new DateTime(2023, 9, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateRangeStart = new DateTime(2023, 8, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            IsApproved = true,
                            OutfitId = 1,
                            RenterId = new Guid("7c34fb52-0fdb-4cd7-027f-08db822aa1b7")
                        },
                        new
                        {
                            OrderId = new Guid("f5e540b6-949c-4dc4-9fd3-b775590cc023"),
                            DateRangeEnd = new DateTime(2023, 8, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateRangeStart = new DateTime(2023, 8, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            IsApproved = true,
                            OutfitId = 2,
                            RenterId = new Guid("7c34fb52-0fdb-4cd7-027f-08db822aa1b7")
                        },
                        new
                        {
                            OrderId = new Guid("dcf5cfb0-1fed-4808-8421-cddfca785e09"),
                            DateRangeEnd = new DateTime(2023, 8, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateRangeStart = new DateTime(2023, 8, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            IsApproved = false,
                            OutfitId = 2,
                            RenterId = new Guid("7c34fb52-0fdb-4cd7-027f-08db822aa1b7")
                        });
                });

            modelBuilder.Entity("NosiYa.Data.Models.Outfit.OutfitSet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("PricePerDay")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("RegionId")
                        .HasColumnType("int");

                    b.Property<int>("RenterType")
                        .HasColumnType("int");

                    b.Property<string>("Size")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("Id");

                    b.HasIndex("RegionId");

                    b.ToTable("OutfitSets");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Color = "Червен",
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Тракийска женска носия.\r\n                    Състои се от:\r\n                    - Риза\r\n					-Сукман\r\n					-Престилка\r\n\r\n                    Ръчно шити орнаменти. \r\n					Към носията Има възможност да се добавят различни аксесоари - цветя, накити и др.\r\n                    ",
                            IsActive = true,
                            IsAvailable = true,
                            Name = "Носия 01",
                            PricePerDay = 25m,
                            RegionId = 73,
                            RenterType = 2,
                            Size = "-S-M-"
                        },
                        new
                        {
                            Id = 2,
                            Color = "Кафяв",
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Родопска детска носия за момче.\r\n                    Състои се от:\r\n                    - Риза\r\n                    - Елек\r\n                    - Панталон\r\n                    - Пояс\r\n\r\n                    Подходяща за момче между 7 и 9 години.\r\n                    ",
                            IsActive = true,
                            IsAvailable = true,
                            Name = "Носия 17",
                            PricePerDay = 30m,
                            RegionId = 1,
                            RenterType = 3,
                            Size = "-XS-S-"
                        },
                        new
                        {
                            Id = 73,
                            Color = "",
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Тази носия е неактивна и служи като контейнер за елементите/частите, когато са временно неактивни.\r\n					Тази носия не трябва да бъде активирана!\r\n                    ",
                            IsActive = true,
                            IsAvailable = false,
                            Name = "In maintenance",
                            PricePerDay = 0m,
                            RegionId = 1,
                            RenterType = 1,
                            Size = "-S-"
                        });
                });

            modelBuilder.Entity("NosiYa.Data.Models.Region", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Regions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Родопската фолклорна област преди е била включена като район от тракийската област. Обособяването ѝ като самостоятелна се е наложило от по-съществените различия между двете области.\r\n\r\nРодопските танци са бавни и умерени с малко разнообразие на движенията и сравнителна простота. Играят се най-често на песен, като характерно тук е, че мъжете също пеят.\r\n\r\nХора̀та се играят в полукръг или кръг и най-често са само мъжки или само женски. Срещат се и разделно-смесени хора, но при тях мъжете и жените не се нареждат един до друг мъж-жена, а в началото на хорото се хващат само мъжете, а след тях – жените.\r\n\r\nМъжете се залавят най-често за длани, което е много характерно за Родопите. В другите области този захват е много рядко срещан. Мъжете играят с широки стъпки, клякат и коленичат бавно и тромаво.",
                            IsActive = true,
                            Name = "Родопски Регион"
                        },
                        new
                        {
                            Id = 72,
                            Description = "Шопската фолклорна област има няколко района – софийски, граовски, кюстендилски, самоковски, ихтимански и годечки, в които има известни различия, въпреки общото в стила.\r\n\r\nТанцуването предизвиква силни преживявания в емоционалната душа на шопите, което се изразява в мощни провиквания, ръмжене и свиркане. Добре известно е движението „натрисане” – силно раздрусване на раменете, предизвикано от динамичните, твърди и отсечени движения в краката, както и от постановката на тялото и хвата за пояс. Високото повдигане на крака е проява на сила и мъжественост. Характерен е подчертаният стремеж за откъсване от земята.",
                            IsActive = true,
                            Name = "Шопски Регион"
                        },
                        new
                        {
                            Id = 73,
                            Description = "Обхваща Родопа планина.Тракийската фолклорна област обикновено се разделя на три района – западнотракийски, източнотракийски и странджански.\r\n\r\nМного от странджанските танци са във връзка с някакъв обред. Най-типични са нестинарските танци, великденските ръченици и кукерските игри. Странджанците играят с голяма съсредоточеност и сериозност. Мъжете респектират със сложни пляскания, а ръцете им излъчват сила и достойнство.\r\n\r\nАкцентът в тракийските танци е движението, насочено надолу – олицетворение на почитта към земята. В някои танци ясно се виждат заемки от битови трудови процеси като месене на хляб и точене на тесто. Тракиецът слива празника и делника в танца си, показвайки, че всеки ден е своеобразен празник.\r\n\r\n",
                            IsActive = true,
                            Name = "Тракийски регион"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("NosiYa.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("NosiYa.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NosiYa.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("NosiYa.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("NosiYa.Data.Models.Cart", b =>
                {
                    b.HasOne("NosiYa.Data.Models.ApplicationUser", "Owner")
                        .WithOne("Cart")
                        .HasForeignKey("NosiYa.Data.Models.Cart", "OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("NosiYa.Data.Models.Comment", b =>
                {
                    b.HasOne("NosiYa.Data.Models.Event", "Event")
                        .WithMany("Comments")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("NosiYa.Data.Models.ApplicationUser", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("NosiYa.Data.Models.Event", b =>
                {
                    b.HasOne("NosiYa.Data.Models.ApplicationUser", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("NosiYa.Data.Models.Image", b =>
                {
                    b.HasOne("NosiYa.Data.Models.Event", "Event")
                        .WithMany("Images")
                        .HasForeignKey("EventId");

                    b.HasOne("NosiYa.Data.Models.Outfit.OutfitPart", "OutfitPart")
                        .WithMany("Images")
                        .HasForeignKey("OutfitPartId");

                    b.HasOne("NosiYa.Data.Models.Outfit.OutfitSet", "OutfitSet")
                        .WithMany("Images")
                        .HasForeignKey("OutfitSetId");

                    b.HasOne("NosiYa.Data.Models.Region", "Region")
                        .WithMany("Images")
                        .HasForeignKey("RegionId");

                    b.Navigation("Event");

                    b.Navigation("OutfitPart");

                    b.Navigation("OutfitSet");

                    b.Navigation("Region");
                });

            modelBuilder.Entity("NosiYa.Data.Models.Outfit.OutfitForCart", b =>
                {
                    b.HasOne("NosiYa.Data.Models.Cart", "Cart")
                        .WithMany("Outfits")
                        .HasForeignKey("CartId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("NosiYa.Data.Models.Outfit.OutfitSet", "OutfitSet")
                        .WithMany()
                        .HasForeignKey("OutfitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cart");

                    b.Navigation("OutfitSet");
                });

            modelBuilder.Entity("NosiYa.Data.Models.Outfit.OutfitPart", b =>
                {
                    b.HasOne("NosiYa.Data.Models.Outfit.OutfitSet", "OutfitSet")
                        .WithMany("OutfitParts")
                        .HasForeignKey("OutfitSetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NosiYa.Data.Models.ApplicationUser", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OutfitSet");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("NosiYa.Data.Models.Outfit.OutfitRenterDate", b =>
                {
                    b.HasOne("NosiYa.Data.Models.Outfit.OutfitSet", "Outfit")
                        .WithMany("OutfitRenterDates")
                        .HasForeignKey("OutfitId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("NosiYa.Data.Models.ApplicationUser", "Renter")
                        .WithMany("OutfitRenterDates")
                        .HasForeignKey("RenterId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Outfit");

                    b.Navigation("Renter");
                });

            modelBuilder.Entity("NosiYa.Data.Models.Outfit.OutfitSet", b =>
                {
                    b.HasOne("NosiYa.Data.Models.Region", "Region")
                        .WithMany("Outfits")
                        .HasForeignKey("RegionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Region");
                });

            modelBuilder.Entity("NosiYa.Data.Models.ApplicationUser", b =>
                {
                    b.Navigation("Cart")
                        .IsRequired();

                    b.Navigation("OutfitRenterDates");
                });

            modelBuilder.Entity("NosiYa.Data.Models.Cart", b =>
                {
                    b.Navigation("Outfits");
                });

            modelBuilder.Entity("NosiYa.Data.Models.Event", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Images");
                });

            modelBuilder.Entity("NosiYa.Data.Models.Outfit.OutfitPart", b =>
                {
                    b.Navigation("Images");
                });

            modelBuilder.Entity("NosiYa.Data.Models.Outfit.OutfitSet", b =>
                {
                    b.Navigation("Images");

                    b.Navigation("OutfitParts");

                    b.Navigation("OutfitRenterDates");
                });

            modelBuilder.Entity("NosiYa.Data.Models.Region", b =>
                {
                    b.Navigation("Images");

                    b.Navigation("Outfits");
                });
#pragma warning restore 612, 618
        }
    }
}
